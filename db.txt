CREATE TABLE restaurants (
  id BIGSERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  link TEXT NOT NULL UNIQUE,
  logo TEXT,
  background_image TEXT,
  is_deleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE workers (
  id BIGSERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  role TEXT NOT NULL CHECK (role IN ('mesero', 'due√±o', 'cocinero')),
  restaurant_id BIGINT REFERENCES restaurants (id) ON DELETE CASCADE,
  is_deleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE order_statuses (
  id BIGSERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE TABLE categories (
  id BIGSERIAL PRIMARY KEY,
  restaurant_id BIGINT REFERENCES restaurants (id) ON DELETE CASCADE,
  image TEXT,
  parent_id BIGINT REFERENCES categories (id) ON DELETE CASCADE,
  is_deleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE dishes (
  id BIGSERIAL PRIMARY KEY,
  price NUMERIC(10, 2) NOT NULL,
  category_id BIGINT REFERENCES categories (id) ON DELETE CASCADE,
  image TEXT,
  is_deleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE sectors (
  id BIGSERIAL PRIMARY KEY,
  name TEXT NOT NULL,
  restaurant_id BIGINT REFERENCES restaurants (id) ON DELETE CASCADE,
  width NUMERIC(10, 2),
  height NUMERIC(10, 2),
  is_deleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE tables (
  id BIGSERIAL PRIMARY KEY,
  type INTEGER NOT NULL,
  number INTEGER NOT NULL,
  sector_id BIGINT REFERENCES sectors (id) ON DELETE CASCADE,
  pos_x NUMERIC(10, 2),
  pos_y NUMERIC(10, 2),
  code UUID DEFAULT gen_random_uuid() NOT NULL UNIQUE,
  qr_code_image TEXT,
  is_deleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE orders (
  id BIGSERIAL PRIMARY KEY,
  table_id BIGINT REFERENCES tables (id) ON DELETE CASCADE,
  order_time TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  total_price NUMERIC(10, 2) NOT NULL,
  is_deleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE order_items (
  id BIGSERIAL PRIMARY KEY,
  order_id BIGINT REFERENCES orders (id) ON DELETE CASCADE,
  dish_id BIGINT REFERENCES dishes (id) ON DELETE CASCADE,
  quantity INTEGER NOT NULL,
  is_deleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE payments (
  id BIGSERIAL PRIMARY KEY,
  order_id BIGINT REFERENCES orders (id) ON DELETE CASCADE,
  amount NUMERIC(10, 2) NOT NULL,
  payment_time TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  method TEXT NOT NULL CHECK (method IN ('efectivo', 'tarjeta', 'transferencia')),
  is_deleted BOOLEAN DEFAULT FALSE
);

CREATE TABLE languages (
  id BIGSERIAL PRIMARY KEY,
  code TEXT NOT NULL UNIQUE,
  name TEXT NOT NULL
);

CREATE TABLE restaurant_languages (
  id BIGSERIAL PRIMARY KEY,
  restaurant_id BIGINT REFERENCES restaurants(id) ON DELETE CASCADE,
  language_id BIGINT REFERENCES languages(id) ON DELETE CASCADE,
  UNIQUE (restaurant_id, language_id)
);

CREATE TABLE category_translations (
  id BIGSERIAL PRIMARY KEY,
  category_id BIGINT REFERENCES categories (id) ON DELETE CASCADE,
  language_id BIGINT REFERENCES languages (id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  link TEXT NOT NULL
);

CREATE TABLE dish_translations (
  id BIGSERIAL PRIMARY KEY,
  dish_id BIGINT REFERENCES dishes (id) ON DELETE CASCADE,
  language_id BIGINT REFERENCES languages (id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  link TEXT NOT NULL,
  description TEXT
);

CREATE TABLE waiter_calls (
  id BIGSERIAL PRIMARY KEY,
  table_id BIGINT REFERENCES tables (id) ON DELETE CASCADE,
  worker_id BIGINT REFERENCES workers (id),
  call_time TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  is_completed BOOLEAN DEFAULT FALSE,
  completed_at TIMESTAMP WITH TIME ZONE
);

CREATE TABLE order_status_history (
  id BIGSERIAL PRIMARY KEY,
  order_id BIGINT REFERENCES orders (id) ON DELETE CASCADE,
  status_id BIGINT REFERENCES order_statuses (id) ON DELETE CASCADE,
  worker_id BIGINT REFERENCES workers (id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Views

CREATE OR REPLACE VIEW restaurant_languages_view AS
SELECT DISTINCT
  rl.id as id,
  r.id AS restaurant_id,
  r.link AS restaurant_link,
  l.id AS language_id,
  l.code AS language_code,
  l.name AS language_name
FROM restaurant_languages rl
JOIN restaurants r ON rl.restaurant_id = r.id
JOIN languages l ON rl.language_id = l.id;

CREATE OR REPLACE VIEW category_details AS
SELECT 
  c.id AS id,
  c.image AS category_image,
  c.is_deleted AS is_deleted,
  ct.name AS category_name,
  ct.link AS category_link,
  r.id AS restaurant_id,
  r.link AS restaurant_link,
  l.id AS language_id,
  l.code AS language_code,
  parent.id AS parent_category_id,
  parent_ct.link AS parent_category_link
FROM categories c
JOIN category_translations ct ON c.id = ct.category_id
JOIN languages l ON ct.language_id = l.id
JOIN restaurants r ON c.restaurant_id = r.id
LEFT JOIN categories parent ON c.parent_id = parent.id
LEFT JOIN category_translations parent_ct ON parent.id = parent_ct.category_id AND parent_ct.language_id = l.id;

CREATE OR REPLACE VIEW dish_details AS
SELECT 
  d.id AS id,
  d.price AS dish_price,
  d.image AS dish_image,
  d.is_deleted AS is_deleted,
  dt.name AS dish_name,
  dt.link AS dish_link,
  dt.description AS dish_description,
  c.id AS category_id,
  ct.name AS category_name,
  ct.link AS category_link,
  r.id AS restaurant_id,
  r.link AS restaurant_link,
  l.id AS language_id,
  l.code AS language_code
FROM dishes d
JOIN categories c ON d.category_id = c.id
JOIN category_translations ct ON c.id = ct.category_id
JOIN restaurants r ON c.restaurant_id = r.id
JOIN dish_translations dt ON d.id = dt.dish_id
JOIN languages l ON dt.language_id = l.id;

-- Indexes

CREATE INDEX idx_category_translations_category_id ON category_translations (category_id);
CREATE INDEX idx_category_translations_language_id ON category_translations (language_id);
CREATE INDEX idx_dish_translations_dish_id ON dish_translations (dish_id);
CREATE INDEX idx_dish_translations_language_id ON dish_translations (language_id);
CREATE INDEX idx_categories_restaurant_id ON categories (restaurant_id);
CREATE INDEX idx_categories_parent_id ON categories (parent_id);
CREATE INDEX idx_dishes_category_id ON dishes (category_id);
CREATE INDEX idx_dishes_is_deleted ON dishes (is_deleted);
CREATE INDEX idx_orders_table_id ON orders (table_id);
CREATE INDEX idx_order_status_history_status_id ON order_status_history (status_id);
CREATE INDEX idx_order_statuses_name ON order_statuses (name);